{"version":3,"sources":["/projects/nodejs/botbuilder/mgnlq_model/src//projects/nodejs/botbuilder/mgnlq_model/src/../src/utils/mongo.ts"],"names":[],"mappings":";AAAA;;GAEG;;AAEH,+BAAiC;AACjC,IAAI,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;AAE/B,SAAgB,YAAY,CAAC,QAAa,EAAE,qBAA8B;IACxE,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,qBAAqB,CAAE,CAAC;IAC3D,QAAQ,CAAC,OAAO,CAAC,qBAAqB,IAAI,8BAA8B,EACxE;QACI,gBAAgB,EAAG,IAAI;QACvB,kBAAkB,EAAE,IAAI;QACxB,eAAe,EAAE,IAAI,CAAA,yBAAyB;KAAE,CAAC,CAAC,CAAC,kDAAkD;IACzG,IAAI,EAAE,GAAG,QAAQ,CAAC,UAAU,CAAC;IAC7B,IAAI,MAAM,GAAG,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM;QAChD,2BAA2B;QAC3B,IAAG,CAAC,OAAO,EAAE,CAAC,eAAe,CAAC,KAAK,UAAU,EAAE;YAC3C,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;SACzB;QACD,IAAG,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,eAAe,CAAC,KAAK,UAAU,EAAE;YAC9C,EAAE,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;SAC5B;QACD,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,GAAG;YACjB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,MAAM,CAAC,GAAG,CAAC,CAAC;QAAA,CAAC,CACd,CAAC;QACF,IAAG,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,UAAU,EAAE;YAChD,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;SAC9B;QACD,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,QAAQ,CAAC,eAAe,GAAG,qBAAqB,CAAC,CAAC;YAClD,OAAO,CAAC,EAAE,CAAC,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC;AA7BD,oCA6BC;AAED,SAAgB,WAAW,CAAC,QAAc;IACtC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;IAC3B,QAAQ,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,UAAA,SAAS;QAC9C,OAAA,OAAO,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC;IAA5C,CAA4C,CAC/C,CAAC;AACN,CAAC;AALD,kCAKC;AAED,SAAgB,UAAU,CAAC,QAAc;IACrC,IAAG,QAAQ,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,EAAE;QACnC,QAAQ,CAAC,UAAU,EAAE,CAAC;KACzB;AACL,CAAC;AAJD,gCAIC;AAED,SAAgB,eAAe,CAAC,QAAc;IAC1C,WAAW,CAAC,QAAQ,CAAC,CAAC;IACtB,UAAU,CAAC,QAAQ,CAAC,CAAC;AACzB,CAAC;AAHD,0CAGC;AAED,SAAgB,kBAAkB,CAAC,QAAa;IAC5C,OAAO,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,IAAI,CAC5C,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,cAAc,EAAlB,CAAkB,CAAC,EAAnC,CAAmC,CAChD,CAAC;AACN,CAAC;AAJD,gDAIC","file":"mongo.js","sourcesContent":["/**\r\n * Utiltities for mongo\r\n */\r\n\r\nimport * as debugf from 'debugf';\r\nvar debuglog = debugf('model');\r\n\r\nexport function openMongoose(mongoose: any, mongoConnectionString : string) {\r\n  console.log(' mongoose.connect ' + mongoConnectionString );\r\n  mongoose.connect(mongoConnectionString || 'mongodb://localhost/nodeunit',\r\n  {\r\n      useFindAndModify : true,  //https://mongoosejs.com/docs/deprecations.html#-findandmodify-\r\n      useUnifiedTopology: true,\r\n      useNewUrlParser: true/*useMongoClient : true*/ }); // .then( a => console.log('mongoose connect ok'))\r\n  var db = mongoose.connection;\r\n  var mgopen = new Promise(function (resolve, reject) {\r\n    //db.on.setMaxListeners(0);\r\n    if((typeof db.setMaxListeners) === \"function\") {\r\n        db.setMaxListeners(0);\r\n    }\r\n    if((typeof db.on.setMaxListeners) === \"function\") {\r\n        db.on.setMaxListeners(0);\r\n    }\r\n    db.on('error', (err) => {\r\n      console.error(err);\r\n      reject(err);}\r\n    );\r\n    if((typeof db.once.setMaxListeners) === \"function\") {\r\n        db.once.setMaxListeners(0);\r\n    }\r\n    db.once('open', function () {\r\n      debuglog('connected to ' + mongoConnectionString);\r\n      resolve(db);\r\n    });\r\n  });\r\n  return mgopen;\r\n}\r\n\r\nexport function clearModels(mongoose : any) {\r\n    debuglog(' clear Models ');\r\n    mongoose.connection.modelNames().forEach(modelName =>\r\n        delete mongoose.connection.models[modelName]\r\n    );\r\n}\r\n\r\nexport function disconnect(mongoose : any) {\r\n    if(mongoose.connection.readyState > 0) {\r\n        mongoose.disconnect();\r\n    }\r\n}\r\n\r\nexport function disconnectReset(mongoose : any) {\r\n    clearModels(mongoose);\r\n    disconnect(mongoose);\r\n}\r\n\r\nexport function getCollectionNames(mongoose: any) : Promise<String[]> {\r\n    return mongoose.connection.db.collections().then(\r\n        (cols) => cols.map(col => col.collectionName)\r\n    );\r\n}"],"sourceRoot":"ABC"}