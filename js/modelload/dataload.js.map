{"version":3,"sources":["/projects/nodejs/botbuilder/mgnlq_model/src/../src/modelload/dataload.ts"],"names":[],"mappings":"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","file":"modelload/dataload.js","sourcesContent":["/**\r\n * Functionality to load data into a mongoose model\r\n * (c) gerd forstmann 2017\r\n *\r\n * @file\r\n */\r\n\r\n//import * as intf from 'constants';\r\nimport * as debug from 'debugf';\r\n\r\nvar debuglog = debug('model');\r\n\r\n//const loadlog = logger.logger('modelload', '');\r\n\r\nimport *  as IMatch from '../match/ifmatch';\r\n//import * as InputFilterRules from '../match/rule';\r\n//import * as Tools from '../match/tools';\r\nimport * as fs from 'fs';\r\nimport * as Meta from '../model/meta';\r\nimport * as FUtils from '../model/model';\r\nimport * as Utils from 'abot_utils';\r\n//import * as CircularSer from 'abot_utils';\r\n//import * as Distance from 'abot_stringdist';\r\nimport * as process from 'process';\r\nimport * as _ from 'lodash';\r\n//import {Mongoose as Mongoose} from 'mongoose';\r\nimport * as mongoose from 'mongoose';\r\n(mongoose as any).Promise = global.Promise;\r\n/**\r\n * WATCH out, this instruments mongoose!\r\n */\r\nrequire('mongoose-schema-jsonschema')(mongoose);\r\n/**\r\n * the model path, may be controlled via environment variable\r\n */\r\nvar envModelPath = process.env[\"ABOT_MODELPATH\"] || \"node_modules/abot_testmodel/testmodel\";\r\n\r\nexport function cmpTools(a: IMatch.ITool, b: IMatch.ITool) {\r\n  return a.name.localeCompare(b.name);\r\n}\r\n\r\ntype IModel = IMatch.IModel;\r\n\r\n// load the models\r\n\r\nimport * as Model from '../model/model';\r\n\r\nimport * as SchemaLoad from  './schemaload';\r\n\r\nexport function getModel(mongoose: any, modelName: string, modelPath: string) : Promise<mongoose.Model<any>> {\r\n   if(mongoose.models[modelName]) {\r\n       return Promise.resolve(mongoose.models[modelName]);\r\n   }\r\n   var Eschema = mongoose.models['mongonlq_eschema'];\r\n   if(!Eschema) {\r\n       throw new Error('this database does not have an eschema model initialized');\r\n   }\r\n   return SchemaLoad.makeModelFromDB(mongoose, modelName);\r\n}\r\n\r\nexport function loadModelData(mongoose : any,  modelPath: string, modelName : string ) {\r\n    var data = FUtils.readFileAsJSON('./' + modelPath + './' + modelName + '.data.json');\r\n    var cnt = 0;\r\n    // load the schema, either from database or from file system\r\n    return getModel(mongoose, modelName, modelPath).then(oModel =>{\r\n        console.log('** got a model' + oModel.modelName);\r\n        return Promise.all(data.map( (oRecord,index) => {\r\n            try {\r\n                return SchemaLoad.validateDoc(oModel.modelName, oModel.schema, oRecord);\r\n            } catch(err) {\r\n                console.log('error validation object ' + modelName + ' record #' + index);\r\n                throw err;\r\n            }\r\n        })).then( () => { return oModel;}\r\n        )\r\n    }).then( oModel2 => {\r\n        return Promise.all(data.map( (oRecord,index) => SchemaLoad.validateDocMongoose(mongoose, oModel2.modelName, oModel2.schema, oRecord))).then( () => { return oModel2;})\r\n    }).then( (oModel) => {\r\n        return oModel.remove({}).then(() => oModel)\r\n        .then( oModel => {\r\n            return Promise.all(data.map(doc => {\r\n              var oDoc = new oModel(doc);\r\n                return oDoc.save().then( a => { ++cnt; }).catch(err => console.log(\"error inserting \" + err + \"  inserting : \" + JSON.stringify(doc) + \"\" ));\r\n            }));\r\n         }).then(() => oModel );\r\n    }).then(oModel => {\r\n        console.log(`inserted ${cnt} documents for domain ${modelName}`);\r\n    }).catch(err => {\r\n        console.log(`error inserting documents for domain ${modelName}\\n` + err + err.stack);\r\n    });\r\n}\r\n\r\n(<any>mongoose).Promise = global.Promise;\r\n\r\n\r\nfunction deleteAll(model : mongoose.Model<any>) {\r\n  return model.collection.drop();\r\n}"],"sourceRoot":"ABC"}