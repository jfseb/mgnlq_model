{"version":3,"sources":["/projects/nodejs/botbuilder/mgnlq_model/src/../src/model/mongomap.ts"],"names":[],"mappings":"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","file":"model/mongomap.js","sourcesContent":["/**\r\n * Functionality to map the \"flat\" categories model to a nested document\r\n *\r\n * @file\r\n */\r\n\r\n\r\nexport interface CatMongoMap  { [key: string] : {\r\n        paths : string[], // individual segments, can be  [\"A\",\"[]\",\"B\"] , [\"A\", \"B\"]  or [\"A\", \"[]\"]\r\n        fullpath : string, // the mongoose path as written, e.g. A.B\r\n    }\r\n};\r\n\r\n//import * as intf from 'constants';\r\nimport * as debug from 'debug';\r\n\r\nvar debuglog = debug('mongomap');\r\n\r\nimport * as ISchema from '../modelload/schemaload';\r\n//const loadlog = logger.logger('modelload', '');\r\n\r\nimport *  as IMatch from '../match/ifmatch';\r\nimport * as InputFilterRules from '../match/rule';\r\n//import * as Tools from '../match/tools';\r\nimport * as fs from 'fs';\r\nimport * as Meta from './meta';\r\nimport * as Utils from 'abot_utils';\r\nimport * as CircularSer from 'abot_utils';\r\nimport * as Distance from 'abot_stringdist';\r\nimport * as process from 'process';\r\nimport * as _ from 'lodash';\r\n/**\r\n * the model path, may be controlled via environment variable\r\n */\r\nvar envModelPath = process.env[\"ABOT_MODELPATH\"] || \"node_modules/abot_testmodel/testmodel\";\r\n\r\n\r\n\r\nfunction traverseExecutingContext(obj, context) {\r\n    _.forIn(obj, function (val, key) {\r\n        // console.log(key + \" -> \" + val + \" \");\r\n        context.visit(obj,key, val);\r\n        if (_.isArray(val)) {\r\n            context.enterArray(key,val);\r\n            val.forEach(function(el) {\r\n                if (_.isObject(el)) {\r\n                    traverseExecutingContext(el, context);\r\n                }\r\n            });\r\n            context.leaveArray(key,val);\r\n           // console.log('leaving array key' + key  + \" \" + JSON.stringify(val));\r\n        }\r\n        else if (_.isObject(val)) {\r\n          //  if( _.isArray(val) && _.isObject(val)) {\r\n          //&&      console.log('ABCXASDFS');\r\n          //  };\r\n         //   console.log('is also object' + JSON.stringify(val));\r\n            context.enterObject(key, val);\r\n            traverseExecutingContext(val,context);\r\n            context.leaveObject(key,val);\r\n        }\r\n    });\r\n}\r\n\r\nexport function collectCategories(eSchemaProps : any) {\r\n    var oContext = {\r\n        res : {},\r\n        plainPath : [],\r\n        currentPath : [],\r\n        enterObject : function(key: string, val: any) {\r\n            this.currentPath.push(key);\r\n            this.plainPath.push(key);\r\n        },\r\n        visit: function(obj : any, key: string, val: any) {\r\n            if(key === '_m_category') {\r\n                this.res[val] = {\r\n                    path : this.currentPath.slice(),\r\n                    fullpath : this.plainPath.join('.')\r\n                }\r\n            }\r\n        },\r\n        leaveObject : function(key: string, val: any) {\r\n            this.currentPath.pop();\r\n            this.plainPath.pop();\r\n        },\r\n        enterArray : function(key : string, val: any) {\r\n            this.enterObject(key, val);\r\n            this.currentPath.push('[]');\r\n        },\r\n        leaveArray : function(key : string, val: any) {\r\n            this.leaveObject(key, val);\r\n            this.currentPath.pop();\r\n        }\r\n    }\r\n    traverseExecutingContext(eSchemaProps, oContext );\r\n    return oContext.res;\r\n}\r\n\r\n\r\nexport function makeMongoMap(oDoc : ISchema.IModelDoc, eSchema : ISchema.IExtendedSchema ) : CatMongoMap {\r\n    var oMongoMap = {} as CatMongoMap;\r\n    debuglog( () => 'creating mongomap for ' + JSON.stringify(eSchema.modelname, undefined, 2) + ' and ' + oDoc.modelname );\r\n    debuglog( () =>'creating mongomap for doc ' + JSON.stringify(oDoc, undefined, 2));\r\n    debuglog( () =>'colleting from eSchema.props' + JSON.stringify(eSchema.props,undefined,2));\r\n    var res = collectCategories(eSchema.props);\r\n    oDoc._categories.forEach(cat => {\r\n        // cross check\r\n        if(!res[cat.category]) {\r\n            console.log('here present keys' + Object.keys(res).sort().join(\"; \"));\r\n            console.log(`category ${cat.category} is not in eSchema`); // + JSON.stringify(eSchema,undefined,2)\r\n            console.log(`document has `+ oDoc._categories.map(cat => cat.category).join('; '));\r\n//process.exit(-1);\r\n           console.log(`category \"${cat.category}\" is not in eSchema for ${oDoc.modelname} + ${eSchema.modelname} : `\r\n            + \"=====Schema:\\n\"+ JSON.stringify(eSchema,undefined,2).substring(0,400)\r\n            + \"\\n========oDoc: \\n\" + JSON.stringify(oDoc,undefined,2).substring(0,400));\r\n            process.exit(-1);\r\n            throw new Error(`category ${cat.category} is not in eSchema for ${oDoc.modelname} + ${eSchema.modelname} : `\r\n            + JSON.stringify(eSchema,undefined,2).substring(0,200)\r\n            + \"\\n=========== \" + JSON.stringify(oDoc,undefined,2).substring(0,400));\r\n        }\r\n    });\r\n    return res;\r\n}\r\n\r\n"],"sourceRoot":"ABC"}