{"version":3,"sources":["/projects/nodejs/botbuilder/mgnlq_model/src/../src/model/meta.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;AAEH,oCAAoC;AAEpC,+BAA+B;AAE/B,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;AAM7B;;GAEG;AACH,IAAI,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,WAAW,CAAC;AAS7D,MAAM,SAAS,GAAG,OAAO,CAAC;AAC1B,MAAM,UAAU,GAAG,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;AAEtD,MAAa,KAAK;IAGd,YAAY,IAAa,EAAE,IAAa;QACpC,IAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC;SAC3C;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IACD,MAAM;QACF,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IACD,YAAY;QACR,OAAO,IAAI,CAAC,IAAI,GAAG,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;IAC7C,CAAC;IACD,MAAM;QACF,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;CACJ;AAnBD,sBAmBC;AAWD,SAAgB,cAAc,CAAC,GAAa;IACxC,OAAO,GAAG,CAAC,GAAG,CAAC,UAAS,KAAa;QACjC,OAAO,KAAK,CAAC,MAAM,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;AACP,CAAC;AAJD,wCAIC;AAEY,QAAA,oBAAoB,GAAG,aAAa,CAAC;AACrC,QAAA,qBAAqB,GAAG,cAAc,CAAC;AAEpD,SAAS,UAAU,CAAC,CAAU;IAClB,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAC3B,IAAG,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,MAAM,IAAI,KAAK,CAAC,eAAe,GAAG,CAAC,GAAG,UAAU,CAAC,CAAC;KACrD;IACD,QAAO,CAAC,CAAC,CAAC,CAAC,EAAE;QACT,KAAK,UAAU;YACX,OAAO,cAAc,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,KAAK,UAAU;YACX,OAAO,cAAc,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,KAAK,QAAQ;YACT,OAAO,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC;YACI,MAAM,IAAI,KAAK,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACnD;AACb,CAAC;AAED,SAAgB,cAAc;IAC5B,OAAO;QACD,MAAM,EAAG,UAAS,CAAU;YACxB,OAAO,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAClC,CAAC;QACD,QAAQ,EAAG,UAAS,CAAU;YAC1B,OAAO,IAAI,KAAK,CAAC,UAAU,EAAC,CAAC,CAAC,CAAC;QACnC,CAAC;QACD,QAAQ,EAAG,UAAS,CAAU;YAC1B,OAAO,IAAI,KAAK,CAAC,UAAU,EAAC,CAAC,CAAC,CAAC;QACnC,CAAC;QACD,UAAU,EAAG,UAAU;KAC3B,CAAC;AACL,CAAC;AAbD,wCAaC","file":"meta.js","sourcesContent":["/**\r\n * Functionality managing the match models\r\n *\r\n * @file\r\n */\r\n\r\n//import * as intf from 'constants';\r\n\r\nimport * as debug from 'debug';\r\n\r\nvar debuglog = debug('meta');\r\n\r\nimport *  as IMatch from '../match/ifmatch';\r\nimport * as Model from './model';\r\n\r\n\r\n/**\r\n * the model path, may be controlled via environment variable\r\n */\r\nvar modelPath = process.env[\"ABOT_MODELPATH\"] || \"testmodel\";\r\n\r\nexport interface IMeta {\r\n    toName()  : string,\r\n    toType()  : string,\r\n    toFullString() : string\r\n}\r\n\r\n\r\nconst separator = \" -:- \";\r\nconst validTypes = [\"relation\", \"category\", \"domain\"];\r\n\r\nexport class AMeta implements IMeta {\r\n    name: string;\r\n    type : string;\r\n    constructor(type : string, name : string) {\r\n        if(validTypes.indexOf(type) < 0) {\r\n            throw new Error(\"Illegal Type \" + type);\r\n        }\r\n        this.name = name;\r\n        this.type = type;\r\n    }\r\n    toName() {\r\n        return this.name;\r\n    }\r\n    toFullString() {\r\n        return this.type + separator + this.name;\r\n    }\r\n    toType() {\r\n        return this.type;\r\n    }\r\n}\r\n\r\n\r\nexport interface Meta {\r\n    parseIMeta : (string) => IMeta,\r\n    // constructors\r\n    Domain : (string) => IMeta,\r\n    Category : (string) => IMeta,\r\n    Relation : (string) => IMeta\r\n}\r\n\r\nexport function getStringArray(arr : IMeta[]) {\r\n    return arr.map(function(oMeta : IMeta) {\r\n        return oMeta.toName();\r\n    });\r\n}\r\n\r\nexport const RELATION_hasCategory = \"hasCategory\";\r\nexport const RELATION_isCategoryOf = \"isCategoryOf\";\r\n\r\nfunction parseAMeta(a : string) : IMeta {\r\n            var r = a.split(separator);\r\n            if(!r || r.length !== 2) {\r\n                throw new Error(\"cannot parse \" + a + \" as Meta\");\r\n            }\r\n            switch(r[0]) {\r\n                case \"category\":\r\n                    return getMetaFactory().Category(r[1]);\r\n                case \"relation\":\r\n                    return getMetaFactory().Relation(r[1]);\r\n                case \"domain\":\r\n                    return getMetaFactory().Domain(r[1]);\r\n                default:\r\n                    throw new Error(\"unknown meta type\" + r[0]);\r\n            }\r\n}\r\n\r\nexport function getMetaFactory() : Meta {\r\n  return {\r\n        Domain : function(a : string) : IMeta {\r\n            return new AMeta(\"domain\", a);\r\n        },\r\n        Category : function(a : string) : IMeta {\r\n            return new AMeta(\"category\",a);\r\n        },\r\n        Relation : function(a : string) : IMeta {\r\n            return new AMeta(\"relation\",a);\r\n        },\r\n        parseIMeta : parseAMeta\r\n   };\r\n}\r\n"],"sourceRoot":"ABC"}